"use strict";
(self["webpackChunkvr"] = self["webpackChunkvr"] || []).push([["js_VRMain_version3_5_vrObjectModules_QuizModule_js"],{

/***/ "./js/VRMain/version3_5/vrObjectModules/QuizModule.js":
/*!************************************************************!*\
  !*** ./js/VRMain/version3_5/vrObjectModules/QuizModule.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadQuiz: () => (/* binding */ loadQuiz),
/* harmony export */   nextQuestion: () => (/* binding */ nextQuestion),
/* harmony export */   saveQuizStatus: () => (/* binding */ saveQuizStatus)
/* harmony export */ });
/* harmony import */ var _vrUtility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vrUtility.js */ "./js/VRMain/version3_5/vrUtility.js");
/* harmony import */ var _setTransform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setTransform.js */ "./js/VRMain/version3_5/vrObjectModules/setTransform.js");
/* harmony import */ var _ImageModule_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ImageModule.js */ "./js/VRMain/version3_5/vrObjectModules/ImageModule.js");
/* harmony import */ var _TextModule_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TextModule.js */ "./js/VRMain/version3_5/vrObjectModules/TextModule.js");
/* harmony import */ var _GLTFModelModule_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GLTFModelModule.js */ "./js/VRMain/version3_5/vrObjectModules/GLTFModelModule.js");
/* harmony import */ var _AudioModule_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./AudioModule.js */ "./js/VRMain/version3_5/vrObjectModules/AudioModule.js");
/* harmony import */ var _VideoModule_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./VideoModule.js */ "./js/VRMain/version3_5/vrObjectModules/VideoModule.js");








function setTypesFromUserRes(obj){
    //// res_url and main_type no longer exist in ver. 3.5's VRSceneResult
    //// get res_url, main_type from userProjResDict or userOnlineResDict
    if( userProjResDict || typeof( userOnlineResDict ) == 'object' ){  

        //// get res_url by user resource 
        if( userProjResDict[obj.res_id] && userProjResDict[obj.res_id].res_url ){
            obj.res_url = userProjResDict[obj.res_id].res_url
        } else if( userOnlineResDict[obj.res_id] && userOnlineResDict[obj.res_id].res_url) {
            obj.res_url = userOnlineResDict[obj.res_id].res_url
        } else {
            console.log("Quiz.js: setTypesFromUserRes: res_url does not exist. obj=", obj)
        }     

        //// get main_type by user resource 
        if( userProjResDict[obj.res_id] && userProjResDict[obj.res_id].main_type ){
            obj.main_type = userProjResDict[obj.res_id].main_type
        } else if( userOnlineResDict[obj.res_id] && userOnlineResDict[obj.res_id].res_url) {
            obj.main_type = userOnlineResDict[obj.res_id].main_type
        } else {
            //// userProjResDict usually does not contain Light, Text objects. Recognize them with res_id:
            //// in ver. 3.5: if main_type does not exist, could be default objects
            (0,_vrUtility_js__WEBPACK_IMPORTED_MODULE_0__.checkDefaultImage)(obj)
            switch (obj.res_id) {
                case "Camera":
                case "Light":
                    obj.main_type = obj.res_id.toLowerCase()
                    break

                case "Text":
                    obj.main_type = 'button'
                    obj.sub_type = 'txt'
                    break;
                
                // case "quiz":
                //     obj.main_type = "empty"
                //     obj.sub_type = "quiz"
                //     break;
                    
                default:
                    //// check if obj is default model
                    let defaultModelNames = ["Cube", "Capsule", "Sphere", "ch_Bojue", "ch_Fei", "ch_Lina", "ch_Poyuan", "ch_Roger"]
                    if(defaultModelNames.find(name => name == obj.res_id)){
                        console.log("是預設model: ", obj.res_id)
                        obj.main_type = "model"
                    } else {
                        console.log("VRFunc.js: _loadSceneObjects: main_type does not exist. obj=", obj)        
                    }
                    break;
            }
        }

    } else {
        console.log("VRFunc.js: _loadSceneObjects: userProjResDict or userOnlineResDict does not exist. obj=", obj)    
    }

    return obj
}


function loadQuiz( vrController, obj, position, rotation, scale) {
    let self = vrController

    //// 載入之前先檢查是否網頁端有用戶登入，並檢查是否玩過此專案
    // console.log("VRFunc.js: _loadQuiz: obj=", obj);
    let Quiz = document.createElement("a-entity");
    Quiz.setAttribute("id", obj.generalAttr.obj_id);
    self.makarObjects.push( Quiz );
    
    console.log("VRFunc.js: _loadQuiz: Quiz=", Quiz.object3D);

    Quiz.addEventListener( 'loaded' , function(){
        // console.log(' -------- Quiz loaded ');
        ///// 增加一個「空物件」，代表此 entity 已經自身載入完成
        let QObject3D = new THREE.Object3D();
        Quiz.object3D.add( QObject3D );
    });
    
    let randomQuestionList = [];
    for (let i=0; i<obj.typeAttr.module.question_list.length; i++){
        if (obj.typeAttr.module.question_list[i].allowRandom){
            randomQuestionList.push(i);
        }
    }

    let totalActiveScoreQuestion = 0
    for (let i=0;i<obj.typeAttr.module.display_order_list.length;i++){
        let tempIdx =  obj.typeAttr.module.display_order_list[i].index;
        if (tempIdx == -1){
            let randInt = (0,_vrUtility_js__WEBPACK_IMPORTED_MODULE_0__.getRandomInt)(randomQuestionList.length);
            let randomIdx = randomQuestionList[randInt];
            obj.typeAttr.module.display_order_list[i].index = randomIdx
            tempIdx = randomIdx;
            randomQuestionList.splice(randInt,1);
        }
        if (obj.typeAttr.module.question_list[tempIdx].active_score){
            totalActiveScoreQuestion += 1;
        }
    }

    let idx = obj.typeAttr.module.display_order_list[0].index;
    let first_question = obj.typeAttr.module.question_list[idx];

    let timerContent = document.getElementById('timerContent');

    let firstTimer = -1;
    if (obj.typeAttr.module.timer_type == "Total"){
        firstTimer = obj.typeAttr.module.total_time;
        let timer = document.getElementById("timerDiv");
        timer.style.display = "block";

        let hour = Math.floor(firstTimer/3600);
        let min = Math.floor((firstTimer-hour*3600)/60);
        let sec = firstTimer-hour*3600-min*60;
        timerContent.textContent = hour.toString().padStart(2,'0')+":"+min.toString().padStart(2,'0')+":"+sec.toString().padStart(2,'0');
    }
    else if(obj.typeAttr.module.timer_type == "Custom"){
        firstTimer = first_question.time_limit;
        let timer = document.getElementById("timerDiv");
        timer.style.display = "block";

        let hour = Math.floor(firstTimer/3600);
        let min = Math.floor((firstTimer-hour*3600)/60);
        let sec = firstTimer-hour*3600-min*60;
        timerContent.textContent = hour.toString().padStart(2,'0')+":"+min.toString().padStart(2,'0')+":"+sec.toString().padStart(2,'0');
    }

    let tipButtonDiv = document.getElementById("tipButtonDiv");
    if(first_question.show_tips){
        tipButtonDiv.style.display = "block";
        tipButtonDiv.addEventListener("click",function(){
            let tipDiv = document.getElementById("tipDiv");
            let tipConfirmButton = document.getElementById("tipConfirmButton");
            let tipContent = document.getElementById("tipContent");
            tipDiv.style.display = "block";
            tipContent.textContent = first_question.tips_content;
            tipConfirmButton.addEventListener("click",function(){
                tipDiv.style.display = "none";
            });
        });
    }
    else{
        tipButtonDiv.style.display = "none";
    }

    self.module = {"json":obj.typeAttr.module, "quizEntity":Quiz, "currentIndex":0, "score":0, "choices":[], "correctAnswer":0, "totalActiveScoreQuestion":totalActiveScoreQuestion, "record":new Array(obj.typeAttr.module.question_list.length), "timer":{"currentTimer":null,"counter":firstTimer } , "record_time":0 , "qClock": Date.now() }

    let scoreDiv = document.getElementById("scoreDiv")
    scoreDiv.addEventListener("click",function(){
        scoreDiv.style.display = "none";
        QuizController.nextQuestion(vrController);
    });

    console.log("VRFunc.js: _loadQuiz: _first_question=", first_question );

    if ( first_question.questions_json && Array.isArray( first_question.questions_json ) ){
        for(let i=0; i<first_question.questions_json.length; i++){

            //[start-20231004-howardhsu-modify]//
            let position = new THREE.Vector3().fromArray( first_question.questions_json[i].transformAttr.transform[0].split(",").map( x => Number(x) ) );

            let quaternionArray = first_question.questions_json[i].transformAttr.transform[1].split(",").map( x => Number(x) ) 
            let quaternion = new THREE.Quaternion( quaternionArray[0], quaternionArray[1], quaternionArray[2], quaternionArray[3] )
            let eulerAngle = new THREE.Euler().setFromQuaternion(quaternion, "XYZ")
            let rotation = new THREE.Vector3( eulerAngle.x , -1 * eulerAngle.y , -1 * eulerAngle.z )
            
            let scale    = new THREE.Vector3().fromArray(first_question.questions_json[i].transformAttr.transform[2].split(",").map(x => Number(x) ) );            
	       


            let obj = setTypesFromUserRes(first_question.questions_json[i])


            // let type = first_question.questions_json[i].main_type;
            let type = obj.main_type;

            // console.log("quiz 3.5.0 first_question.questions_json[i]", first_question.questions_json[i])
            // console.log("quiz 3.5.0 first_question.questions_json[i].main_type", type)
            
            
            // let type = getMainTypebyResId( first_question.questions_json[i].res_id )
            
            //[end-20231004-howardhsu-modify]//


            switch(type){
                case "text":                        
                    //[start-20230726-howardhsu-modify]//
                    // self.loadText(first_question.questions_json[i], position, rotation, scale);
                    (0,_TextModule_js__WEBPACK_IMPORTED_MODULE_3__.loadText)( self, obj, position, rotation, scale)
                    //[end-20230726-howardhsu-modify]//
                    break;
                case "image":
                    //[start-20230727-howardhsu-modify]//
                    // self.loadTexture(first_question.questions_json[i], position, rotation, scale);
                    (0,_ImageModule_js__WEBPACK_IMPORTED_MODULE_2__.loadTexture)(self, obj, position, rotation, scale)
                    //[end-20230727-howardhsu-modify]//
                    break;
                case "video":
                    //[start-20230727-howardhsu-modify]//
                    // self.loadVideo(first_question.questions_json[i], position, rotation, scale);
                    (0,_VideoModule_js__WEBPACK_IMPORTED_MODULE_6__.loadVideo)(self, obj, position, rotation, scale);
                    //[end-20230727-howardhsu-modify]//
                    break;
                case "model":
                    //[start-20230726-howardhsu-modify]//                    
                    console.log("quiz 3.5.0 obj", obj)
                    // self.loadGLTFModel(first_question.questions_json[i], position, rotation, scale, self.cubeTex );           
                    ;(0,_GLTFModelModule_js__WEBPACK_IMPORTED_MODULE_4__.loadGLTFModel)(self, obj, position, rotation, scale, self.cubeTex )
                    //[end-20230726-howardhsu-modify]//                        
                    break;
                case "audio":
                    //[start-20230726-howardhsu-modify]//
                    // self.loadAudio(first_question.questions_json[i], position, rotation, scale );
                    (0,_AudioModule_js__WEBPACK_IMPORTED_MODULE_5__.loadAudio)( self, obj, position, rotation, scale );
                    //[end-20230726-howardhsu-modify]//
                    break;
            }
        }
    }
    
    if ( first_question.options_json ){

        for(let i=0; i<first_question.options_json.length; i++){
            
            //[start-20231004-howardhsu-modify]//
            let position = new THREE.Vector3().fromArray( first_question.options_json[i].transformAttr.transform[0].split(",").map( x => Number(x) ) );

            let quaternionArray = first_question.options_json[i].transformAttr.transform[1].split(",").map( x => Number(x) ) 
            let quaternion = new THREE.Quaternion( quaternionArray[0], quaternionArray[1], quaternionArray[2], quaternionArray[3] )
            let eulerAngle = new THREE.Euler().setFromQuaternion(quaternion, "XYZ")
            let rotation = new THREE.Vector3( eulerAngle.x , -1 * eulerAngle.y , -1 * eulerAngle.z )
            
            let scale    = new THREE.Vector3().fromArray(first_question.options_json[i].transformAttr.transform[2].split(",").map(x => Number(x) ) );            
	        //[end-20231004-howardhsu-modify]//

            //[start-20231005-howardhsu-modify]//
            console.log("Quiz.js: first_question.options_json[i]=", first_question.options_json[i])
            let obj = setTypesFromUserRes(first_question.options_json[i], true)


            // let type = first_question.options_json[i].sub_type;
            let type = obj.sub_type;
            if(obj.main_type == "text"){
                type = "txt";
            }
            //// 因為既然文字有問題 先推測圖片的sub_type可能也有問題
            



            console.log("VRFunc.js: _loadQuiz: _loadOption: ", i , type , obj)
            let Entity;
            let pOption;
            switch(type){
                case "txt":

                    console.log("Quiz.js:  type=", type)
                    // pOption = self.loadText(first_question.options_json[i], position, rotation, scale);
                    pOption = (0,_TextModule_js__WEBPACK_IMPORTED_MODULE_3__.loadText)( self, obj, position, rotation, scale)
                    break;

                case "gif":
                case "jpg":
                case "jpeg":
                case "png":

                    // pOption = self.loadTexture(first_question.options_json[i], position, rotation, scale);
                    pOption = (0,_ImageModule_js__WEBPACK_IMPORTED_MODULE_2__.loadTexture)(self, obj, position, rotation, scale)

                    break;

                case "button":
                    obj.res_url = "https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/button_withText.png";
                    pOption = (0,_ImageModule_js__WEBPACK_IMPORTED_MODULE_2__.loadTexture)(self, obj, position, rotation, scale)
                    break;
            }
            
            //[end-20231005-howardhsu-modify]//

            if (type != "button" && (first_question.option_type == "MutiOption_Text"|| first_question.option_type == "MutiOption_Image")){

                if ( (0,_vrUtility_js__WEBPACK_IMPORTED_MODULE_0__.isPromise)( pOption ) == false ){
                    continue;
                }

                pOption.then( function( ret ){
                    Entity = ret;

                    if(first_question.option_type == "MutiOption_Text"){

                        console.log(" *** loaded: " , Entity.object3D );

                        let circlePos = new THREE.Vector3(0,0,0);
                        let circleRot = new THREE.Vector3(0,0,0);
                        let circleScale = new THREE.Vector3(1,1,1);

                        let base = document.createElement("a-plane");
                        base.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle.png");
                        base.setAttribute("id","circle_base");
                        base.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#3C3C3C; depthWrite:false" );
                        // setTransform(base, circlePos, circleRot, circleScale);
                        Entity.appendChild(base);

                        let circle = document.createElement("a-plane");
                        circle.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle_frame.png");
                        circle.setAttribute("id","circle_out");
                        circle.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#7B7B7B; depthWrite:false" ); 
                        // setTransform(circle, circlePos, circleRot, circleScale);
                        Entity.appendChild(circle);
                        
                        let circle2 = document.createElement("a-plane");
                        circle2.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle.png");
                        circle2.setAttribute("id","circle_in");
                        circle2.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#00d1c1; depthWrite:false" );
                        circle2.setAttribute( "visible", false);
                        // circleScale.multiply( new THREE.Vector3( 0.7,0.7,0.7 ) );
                        // setTransform(circle2, circlePos, circleRot, circleScale);
                        Entity.appendChild(circle2);

                        /////////////
                        // console.log(" *** geometry-set: " , Entity.object3D , Entity.getObject3D("mesh").geometry.attributes.position.array[0] );
                        // console.log('VRFunc.js: _loadQuiz: scale ', Entity.object3D.parent.scale , Entity.object3D  );

                        let width = Math.abs(Entity.getObject3D("mesh").geometry.attributes.position.array[0])*2;
                        circlePos.x = circlePos.x + width*0.5 + 0.3/Entity.object3D.parent.el.getAttribute("scale").x;
                        circlePos.z = circlePos.z - 0.01;
                        base.setAttribute("position" , circlePos.clone().multiply( new THREE.Vector3( -1, 1, 1 ) ) );
                        circle.setAttribute("position" , circlePos.clone().multiply( new THREE.Vector3( -1, 1, 1 ) ) );
                        circle2.setAttribute("position" , circlePos.clone().multiply( new THREE.Vector3( -1, 1, 1 ) ) );

                        //[start-20230706-howardhsu-modify]//
                        circleScale.multiply( new THREE.Vector3( 0.2, 0.2, 0.2 ) );
                        //[start-20230706-howardhsu-modify]//

                        circleScale.divide(Entity.object3D.parent.el.getAttribute("scale"))

                        base.setAttribute("scale" , circleScale );
                        circle.setAttribute("scale" , circleScale );
                        circle2.setAttribute("scale" , circleScale.clone().multiply( new THREE.Vector3( 0.7,0.7,0.7 ) ) );


                        let f_setRenderOrder = function( evt ){
                            if (evt.target == evt.currentTarget){
                                // console.log('1 ************ evt= ', evt.target.object3D.children[0] );
                                if ( evt.target.object3D ){
                                    if ( evt.target.object3D.children[0] ){
                                        evt.target.object3D.children[0].renderOrder = 1;
                                    }
                                }
                            }
                        }
                        base.addEventListener("loaded", f_setRenderOrder );
                        circle.addEventListener("loaded", f_setRenderOrder );
                        circle2.addEventListener("loaded", f_setRenderOrder );

                        /////////////

                        // Entity.addEventListener("geometry-set", function(evt){
                        // 	console.log(" *** geometry-set: " , Entity.object3D , Entity.getObject3D("mesh").geometry.attributes.position.array[0] );
                        // 	let width = Math.abs(Entity.getObject3D("mesh").geometry.attributes.position.array[0])*2;
                        // 	circlePos.x = circlePos.x + width*0.5 + 0.3/Entity.object3D.parent.el.getAttribute("scale").x;
                        // 	circlePos.z = circlePos.z - 0.01;
                        // 	base.setAttribute("position" , circlePos.clone().multiply( new THREE.Vector3( -1, 1, 1 ) ) );
                        // 	circle.setAttribute("position" , circlePos.clone().multiply( new THREE.Vector3( -1, 1, 1 ) ) );
                        // 	circle2.setAttribute("position" , circlePos.clone().multiply( new THREE.Vector3( -1, 1, 1 ) ) );
                        // });

                        // Entity.addEventListener("loaded", function(evt){
                        // 	Entity.object3D.parent.el.addEventListener("loaded", function(evt){
                        // 		let circleScale = new THREE.Vector3(1,1,1);
                        // 		console.log('VRFunc.js: _loadQuiz: scale ', Entity.object3D.parent.el.getAttribute("scale") , Entity.object3D );

                        // 		circleScale.multiply( new THREE.Vector3( 0.4, 0.4, 0.4 ) );
                        // 		circleScale.divide(Entity.object3D.parent.el.getAttribute("scale"))

                        // 		base.setAttribute("scale" , circleScale );
                        // 		circle.setAttribute("scale" , circleScale );
                        // 		circle2.setAttribute("scale" , circleScale.clone().multiply( new THREE.Vector3( 0.7,0.7,0.7 ) ) );
                        // 	});
                        // });

                    }
                    else{

                        ///////

                        let circlePos = new THREE.Vector3(0,0,0);
                        let circleRot = new THREE.Vector3(0,0,0);
                        let circleScale = new THREE.Vector3(1,1,1);

                        let timeoutID = setInterval( function () {
                            if (Entity.getAttribute("heightForQuiz")){ 
                                let height = Entity.getAttribute("heightForQuiz");

                                circleScale.multiply( new THREE.Vector3( 0.4, 0.4, 0.4 ) );
                                circleScale.divide(Entity.getAttribute("scale"))
                                circlePos.y = circlePos.y - height/2 - (0.3/Entity.getAttribute("scale").y);

                                let base = document.createElement("a-plane");
                                base.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle.png");
                                base.setAttribute("id","circle_base");
                                base.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#3C3C3C; depthWrite:false" );
                                (0,_setTransform_js__WEBPACK_IMPORTED_MODULE_1__.setTransform)(base, circlePos, circleRot, circleScale);
                                Entity.appendChild(base);
    
                                let circle = document.createElement("a-plane");
                                circle.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle_frame.png");
                                circle.setAttribute("id","circle_out");
                                circle.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#7B7B7B; depthWrite:false" ); 
                                (0,_setTransform_js__WEBPACK_IMPORTED_MODULE_1__.setTransform)(circle, circlePos, circleRot, circleScale);
                                Entity.appendChild(circle);
                                
                                let circle2 = document.createElement("a-plane");
                                circle2.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle.png");
                                circle2.setAttribute("id","circle_in");
                                circle2.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#00d1c1; depthWrite:false" );
                                circle2.setAttribute( "visible", false);
                                circleScale.multiply( new THREE.Vector3( 0.7,0.7,0.7 ) );
                                (0,_setTransform_js__WEBPACK_IMPORTED_MODULE_1__.setTransform)(circle2, circlePos, circleRot, circleScale);
                                Entity.appendChild(circle2);


                                let f_setRenderOrder = function( evt ){
                                    if (evt.target == evt.currentTarget){
                                        // console.log('2 ************ evt= ', evt.target.object3D.children[0] );
                                        if ( evt.target.object3D ){
                                            if ( evt.target.object3D.children[0] ){
                                                evt.target.object3D.children[0].renderOrder = 1;
                                            }
                                        }
                                    }
                                }
                                base.addEventListener("loaded", f_setRenderOrder );
                                circle.addEventListener("loaded", f_setRenderOrder );
                                circle2.addEventListener("loaded", f_setRenderOrder );

                                

                                window.clearInterval(timeoutID);
                            }
                        }, 1);

                        ///////


                        // Entity.addEventListener("loaded", function(evt){
                        // 	let circlePos = new THREE.Vector3(0,0,0);
                        // 	let circleRot = new THREE.Vector3(0,0,0);
                        // 	let circleScale = new THREE.Vector3(1,1,1);

                        // 	let timeoutID = setInterval( function () {
                        // 		if (Entity.getAttribute("heightForQuiz")){ 
                        // 			let height = Entity.getAttribute("heightForQuiz");

                        // 			circleScale.multiply( new THREE.Vector3( 0.4, 0.4, 0.4 ) );
                        // 			circleScale.divide(Entity.getAttribute("scale"))
                        // 			circlePos.y = circlePos.y - height/2 - (0.3/Entity.getAttribute("scale").y);

                        // 			let base = document.createElement("a-plane");
                        // 			base.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle.png");
                        // 			base.setAttribute("id","circle_base");
                        // 			base.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#3C3C3C; depthWrite:false" );
                        // 			setTransform(base, circlePos, circleRot, circleScale);
                        // 			Entity.appendChild(base);
        
                        // 			let circle = document.createElement("a-plane");
                        // 			circle.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle_frame.png");
                        // 			circle.setAttribute("id","circle_out");
                        // 			circle.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#7B7B7B; depthWrite:false" ); 
                        // 			setTransform(circle, circlePos, circleRot, circleScale);
                        // 			Entity.appendChild(circle);
                                    
                        // 			let circle2 = document.createElement("a-plane");
                        // 			circle2.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle.png");
                        // 			circle2.setAttribute("id","circle_in");
                        // 			circle2.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#00d1c1; depthWrite:false" );
                        // 			circle2.setAttribute( "visible", false);
                        // 			circleScale.multiply( new THREE.Vector3( 0.7,0.7,0.7 ) );
                        // 			setTransform(circle2, circlePos, circleRot, circleScale);
                        // 			Entity.appendChild(circle2);
    
                        // 			window.clearInterval(timeoutID);
                        // 		}
                        // 	}, 1);
                            
                        // });

                        
                    }

                });

                

            }
        }
    }

    //// 20210107-每一秒執行一次，將counter減一，並顯示剩餘秒數，到0會跳時間到 ////
    if (self.module.timer.counter >= 0){
        self.module.qClock = Date.now();
        let timeoutID = setInterval(function() {
            self.module.timer.currentTimer = timeoutID;
            self.module.timer.counter -= 1;
            
            let hour = Math.floor(self.module.timer.counter/3600);
            let min = Math.floor((self.module.timer.counter-hour*3600)/60);
            let sec = self.module.timer.counter-hour*3600-min*60;
            timerContent.textContent = hour.toString().padStart(2,'0')+":"+min.toString().padStart(2,'0')+":"+sec.toString().padStart(2,'0');
            // console.log(self.module.timer.counter);
            if (self.module.timer.counter == 0){

                window.clearInterval(self.module.timer.currentTimer);
                if (obj.typeAttr.module.timer_type == "Custom"){
                    if (first_question.show_score){
                        let scoreDiv = document.getElementById("scoreDiv");
                        let score = document.getElementById("score");
                        scoreDiv.style.display = "block";
                        score.textContent = self.module.score;
                        
                    }
                    else{
                        QuizController.nextQuestion(vrController);
                    }
                }
                else{
                    let temp = []
                    let quizEntity = self.module.quizEntity;
                    for (let item of quizEntity.children) {
                        temp.push(item);
                    }
                    temp.forEach(function(item){
                        for (let i = 0; i < self.makarObjects.length; i++ ){
                            if (self.makarObjects[i].id == item.id){
                                let makarObject = self.makarObjects[i];
                                if(makarObject.getAttribute("src")){
                                    let id = makarObject.getAttribute("src").split('#')[1];
                                    if (document.getElementById(id)){
                                        document.getElementById(id).remove();
                                    }
                                }
                                makarObject.remove();
                                self.makarObjects.splice(i,1);
                            }
                        }
                    });

                    let tipButtonDiv = document.getElementById("tipButtonDiv");
                    let tipDiv = document.getElementById("tipDiv");
                    tipButtonDiv.style.display = "none";
                    tipDiv.style.display = "none";

                    let startQuiz = document.getElementById("startQuiz");
                    let QuizStartButton = document.getElementById("QuizStartButton");
                    let QuizStartContent = document.getElementById("QuizStartContent");
                    startQuiz.style.display = "block";
                    QuizStartContent.textContent = "時間到"
                    
                    let quizIndex = {
                        question: idx ,
                        get_score:  0,
                        answer_time: self.module.json.question_list[idx].time_limit ,
                        answer_options: [],
                        answer_cloze: "",
                        answer_is_enable: false,
                        answer_is: false,
                    }
                    self.module.record[idx] = quizIndex;
                    self.module.record_time += self.module.json.question_list[idx].time_limit;
                    self.module.qClock = Date.now();

                    // let timeup = document.getElementById("timeup");
                    // timeup.style.display = "block";
                    // let timeupConfirmButton = document.getElementById("timeupConfirmButton");
                    QuizStartButton.addEventListener("click",function(){
                        startQuiz.style.display = "none";
                        // vrController.nextQuestion();
                        //[start-20230712-howardhsu-add]//
                        //// 存檔: 沒有下一題，預定紀錄答題狀態上雲端 (就是this.nextQusetion底下else的全部)
                        QuizController.saveQuizStatus(vrController);
                        //[end-20230712-howardhsu-add]//
                    });

                }
            }
        },1000);
    }
    //// ---------------------------------------------------------------- ////	
    
    (0,_setTransform_js__WEBPACK_IMPORTED_MODULE_1__.setTransform)(Quiz, position, rotation, scale);
    self.vrScene.appendChild(Quiz);

}

function nextQuestion(vrController) {
    let self = vrController
    self.module["choices"] = []
    let temp = []
    // let quizEntity;
    //20200901-text-geometry-test
    // if (target.object3D.parent.parent.el){
    //20200901-text-geometry-test
    // if (target.localName == "a-text"){
    // 	quizEntity = target.object3D.parent.parent.el;
    // }
    // else{
    // 	quizEntity = target.object3D.parent.el;
    // }
    let quizEntity = self.module.quizEntity;
    for (let item of quizEntity.children) {
        temp.push(item);
    }
    temp.forEach(function(item){
        for (let i = 0; i < self.makarObjects.length; i++ ){
            if (self.makarObjects[i].id == item.id){
                let makarObject = self.makarObjects[i];
                if(makarObject.getAttribute("src")){
                    let id = makarObject.getAttribute("src").split('#')[1];
                    if (document.getElementById(id)){
                        document.getElementById(id).remove();
                    }
                }
                makarObject.remove();
                self.makarObjects.splice(i,1);
            }
        }
    });

    self.module.currentIndex += 1;
    if (self.module.currentIndex < self.module.json.display_order_list.length){
        let idx = self.module.json.display_order_list[self.module.currentIndex].index
        let next_question = self.module.json.question_list[idx];

        if(self.module.json.timer_type == "Custom"){
            self.module.timer.counter = next_question.time_limit;
        }

        let tipButtonDiv = document.getElementById("tipButtonDiv");
        if(next_question.show_tips){
            tipButtonDiv.style.display = "block";
            tipButtonDiv.addEventListener("click",function(){
                let tipDiv = document.getElementById("tipDiv");
                let tipConfirmButton = document.getElementById("tipConfirmButton");
                let tipContent = document.getElementById("tipContent");
                tipDiv.style.display = "block";
                tipContent.textContent = next_question.tips_content;
                tipConfirmButton.addEventListener("click",function(){
                    tipDiv.style.display = "none";
                });
            });
        }
        else{
            tipButtonDiv.style.display = "none";
        }

        if ( next_question.questions_json && Array.isArray( next_question.questions_json ) ){
            for(let i=0; i<next_question.questions_json.length; i++){
                let position = new THREE.Vector3().fromArray(next_question.questions_json[i].transform[0].split(",").map(function(x){return Number(x)}) );
                let rotation = new THREE.Vector3().fromArray(next_question.questions_json[i].transform[1].split(",").map(function(x){return Number(x)}) );
                let scale    = new THREE.Vector3().fromArray(next_question.questions_json[i].transform[2].split(",").map(function(x){return Number(x)}) );
                let type = next_question.questions_json[i].main_type;
                switch(type){
                    case "text":                            
                        //[start-20230726-howardhsu-modify]//
                        // self.loadText(next_question.questions_json[i], position, rotation, scale);
                        (0,_TextModule_js__WEBPACK_IMPORTED_MODULE_3__.loadText)( self, next_question.questions_json[i], position, rotation, scale)
                        //[end-20230726-howardhsu-modify]//
                        break;
                    case "image":
                        //[start-20230727-howardhsu-modify]//
                        // self.loadTexture(next_question.questions_json[i], position, rotation, scale);
                        // ImageController.loadTexture(self, next_question.questions_json[i], position, rotation, scale);
                        (0,_ImageModule_js__WEBPACK_IMPORTED_MODULE_2__.loadTexture)(self, next_question.questions_json[i], position, rotation, scale);
                        //[end-20230727-howardhsu-modify]//
                        break;
                    case "video":
                        //[start-20230727-howardhsu-modify]//
                        // self.loadVideo(next_question.questions_json[i], position, rotation, scale);
                        (0,_VideoModule_js__WEBPACK_IMPORTED_MODULE_6__.loadVideo)(self, next_question.questions_json[i], position, rotation, scale);
                        //[end-20230727-howardhsu-modify]//
                        break;
                    case "model":
                        //[start-20230726-howardhsu-modify]//    
                        // self.loadGLTFModel(next_question.questions_json[i], position, rotation, scale, self.cubeTex );      
                        (0,_GLTFModelModule_js__WEBPACK_IMPORTED_MODULE_4__.loadGLTFModel)(self, next_question.questions_json[i], position, rotation, scale, self.cubeTex )
                        //[end-20230726-howardhsu-modify]//  
                        break;
                }
            }
        }
        

        if ( next_question.options_json && Array.isArray( next_question.options_json ) ){

            for(let i=0; i<next_question.options_json.length; i++){
                let position = new THREE.Vector3().fromArray(next_question.options_json[i].transform[0].split(",").map(function(x){return Number(x)}) );
                let rotation = new THREE.Vector3().fromArray(next_question.options_json[i].transform[1].split(",").map(function(x){return Number(x)}) );
                let scale    = new THREE.Vector3().fromArray(next_question.options_json[i].transform[2].split(",").map(function(x){return Number(x)}) );
                let sub_type = next_question.options_json[i].sub_type;
                let Entity;

                let pOption;

                switch(sub_type){
                    case "txt":
                        //[start-20230726-howardhsu-modify]//
                        // pOption = self.loadText(next_question.options_json[i], position, rotation, scale);
                        pOption = (0,_TextModule_js__WEBPACK_IMPORTED_MODULE_3__.loadText)( self, next_question.options_json[i], position, rotation, scale)
                        //[end-20230726-howardhsu-modify]//                            
                        break;
                    case "gif":
                    case "jpg":
                    case "jpeg":
                    case "png":
                        //[start-20230727-howardhsu-modify]//
                        // pOption = self.loadTexture(next_question.options_json[i], position, rotation, scale);
                        pOption = (0,_ImageModule_js__WEBPACK_IMPORTED_MODULE_2__.loadTexture)(self, next_question.options_json[i], position, rotation, scale);
                        //[end-20230727-howardhsu-modify]//
                        break;
                    case "button":
                        next_question.options_json[i].res_url = "https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/button_withText.png";
                        //[start-20230727-howardhsu-modify]//
                        // pOption = self.loadTexture(next_question.options_json[i], position, rotation, scale);
                        pOption = (0,_ImageModule_js__WEBPACK_IMPORTED_MODULE_2__.loadTexture)(self, next_question.options_json[i], position, rotation, scale);
                        //[end-20230727-howardhsu-modify]//
                        break;
                }
                if (sub_type != "button" && (next_question.option_type == "MutiOption_Text"|| next_question.option_type == "MutiOption_Image")){

                    if ( (0,_vrUtility_js__WEBPACK_IMPORTED_MODULE_0__.isPromise)( pOption ) == false ){
                        continue;
                    }

                    pOption.then( function( ret ){

                        Entity = ret;

                        if(next_question.option_type == "MutiOption_Text"){

                            let circlePos = new THREE.Vector3(0,0,0);
                            let circleRot = new THREE.Vector3(0,0,0);
                            let circleScale = new THREE.Vector3(1,1,1);

                            let base = document.createElement("a-plane");
                            base.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle.png");
                            base.setAttribute("id","circle_base");
                            base.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#3C3C3C; depthWrite:false" );
                            // setTransform(base, circlePos, circleRot, circleScale);
                            Entity.appendChild(base);

                            let circle = document.createElement("a-plane");
                            circle.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle_frame.png");
                            circle.setAttribute("id","circle_out");
                            circle.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#7B7B7B; depthWrite:false" ); 
                            // setTransform(circle, circlePos, circleRot, circleScale);
                            Entity.appendChild(circle);
                            
                            let circle2 = document.createElement("a-plane");
                            circle2.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle.png");
                            circle2.setAttribute("id","circle_in");
                            circle2.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#00d1c1; depthWrite:false" );
                            circle2.setAttribute( "visible", false);
                            // circleScale.multiply( new THREE.Vector3( 0.7,0.7,0.7 ) );
                            // setTransform(circle2, circlePos, circleRot, circleScale);
                            Entity.appendChild(circle2);

                            let f_setRenderOrder = function( evt ){
                                if (evt.target == evt.currentTarget){
                                    if ( evt.target.object3D ){
                                        if ( evt.target.object3D.children[0] ){
                                            evt.target.object3D.children[0].renderOrder = 1;
                                        }
                                    }
                                }
                            }
                            base.addEventListener("loaded", f_setRenderOrder );
                            circle.addEventListener("loaded", f_setRenderOrder );
                            circle2.addEventListener("loaded", f_setRenderOrder );

                            /////////

                            // console.log(" *** geometry-set: " , Entity.object3D , Entity.getObject3D("mesh").geometry.attributes.position.array[0] );
                            // console.log('VRFunc.js: _loadQuiz: scale ', Entity.object3D.parent.scale , Entity.object3D  );

                            let width = Math.abs(Entity.getObject3D("mesh").geometry.attributes.position.array[0])*2;
                            circlePos.x = circlePos.x + width*0.5 + 0.3/Entity.object3D.parent.el.getAttribute("scale").x;
                            circlePos.z = circlePos.z - 0.01;
                            base.setAttribute("position" , circlePos.clone().multiply( new THREE.Vector3( -1, 1, 1 ) ) );
                            circle.setAttribute("position" , circlePos.clone().multiply( new THREE.Vector3( -1, 1, 1 ) ) );
                            circle2.setAttribute("position" , circlePos.clone().multiply( new THREE.Vector3( -1, 1, 1 ) ) );

                            circleScale.multiply( new THREE.Vector3( 0.4, 0.4, 0.4 ) );
                            circleScale.divide(Entity.object3D.parent.el.getAttribute("scale"))

                            base.setAttribute("scale" , circleScale );
                            circle.setAttribute("scale" , circleScale );
                            circle2.setAttribute("scale" , circleScale.clone().multiply( new THREE.Vector3( 0.7,0.7,0.7 ) ) );

                            /////////

                            // Entity.addEventListener("geometry-set", function(evt){
                            // 	console.log(" *** geometry-set: " , Entity.object3D , Entity.getObject3D("mesh").geometry.attributes.position.array[0] );
                            // 	let width = Math.abs(Entity.getObject3D("mesh").geometry.attributes.position.array[0])*2;
                            // 	circlePos.x = circlePos.x + width*0.5 + 0.3/Entity.object3D.parent.el.getAttribute("scale").x;
                            // 	circlePos.z = circlePos.z - 0.01;
                            // 	base.setAttribute("position" , circlePos.clone().multiply( new THREE.Vector3( -1, 1, 1 ) ) );
                            // 	circle.setAttribute("position" , circlePos.clone().multiply( new THREE.Vector3( -1, 1, 1 ) ) );
                            // 	circle2.setAttribute("position" , circlePos.clone().multiply( new THREE.Vector3( -1, 1, 1 ) ) );
                            // });

                            // Entity.addEventListener("loaded", function(evt){
                            // 	Entity.object3D.parent.el.addEventListener("loaded", function(evt){
                            // 		circleScale.multiply( new THREE.Vector3( 0.4, 0.4, 0.4 ) );
                            // 		circleScale.divide(Entity.object3D.parent.el.getAttribute("scale"))

                            // 		base.setAttribute("scale" , circleScale );
                            // 		circle.setAttribute("scale" , circleScale );
                            // 		circle2.setAttribute("scale" , circleScale.clone().multiply( new THREE.Vector3( 0.7,0.7,0.7 ) ) );
                            // 	});
                            // });
                            

                            
                        }
                        else{


                            ////////

                            let circlePos = new THREE.Vector3(0,0,0);
                            let circleRot = new THREE.Vector3(0,0,0);
                            let circleScale = new THREE.Vector3(1,1,1);

                            let timeoutID = setInterval( function () {
                                if (Entity.getAttribute("heightForQuiz")){ 
                                    let height = Entity.getAttribute("heightForQuiz");
                                    // console.log("20200831",height)
                                    // circlePos.x = circlePos.x + (width/2 + 0.1);
                                    // circlePos.y = circlePos.y - height/2 - 0.2;
                                    circleScale.multiply( new THREE.Vector3( 0.4, 0.4, 0.4 ) );
                                    circleScale.divide(Entity.getAttribute("scale"))
                                    circlePos.y = circlePos.y - height/2 - 0.3/Entity.getAttribute("scale").y;

                                    let base = document.createElement("a-plane");
                                    base.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle.png");
                                    base.setAttribute("id","circle_base");
                                    base.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#3C3C3C; depthWrite:false" );
                                    (0,_setTransform_js__WEBPACK_IMPORTED_MODULE_1__.setTransform)(base, circlePos, circleRot, circleScale);
                                    Entity.appendChild(base);
        
                                    let circle = document.createElement("a-plane");
                                    circle.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle_frame.png");
                                    circle.setAttribute("id","circle_out");
                                    circle.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#7B7B7B; depthWrite:false" ); 
                                    (0,_setTransform_js__WEBPACK_IMPORTED_MODULE_1__.setTransform)(circle, circlePos, circleRot, circleScale);
                                    Entity.appendChild(circle);
                                    
                                    let circle2 = document.createElement("a-plane");
                                    circle2.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle.png");
                                    circle2.setAttribute("id","circle_in");
                                    circle2.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#00d1c1; depthWrite:false" );
                                    circle2.setAttribute( "visible", false);
                                    circleScale.multiply( new THREE.Vector3( 0.7,0.7,0.7 ) );
                                    (0,_setTransform_js__WEBPACK_IMPORTED_MODULE_1__.setTransform)(circle2, circlePos, circleRot, circleScale);
                                    Entity.appendChild(circle2);

                                    let f_setRenderOrder = function( evt ){
                                        if (evt.target == evt.currentTarget){
                                            if ( evt.target.object3D ){
                                                if ( evt.target.object3D.children[0] ){
                                                    evt.target.object3D.children[0].renderOrder = 1;
                                                }
                                            }
                                        }
                                    }
                                    base.addEventListener("loaded", f_setRenderOrder );
                                    circle.addEventListener("loaded", f_setRenderOrder );
                                    circle2.addEventListener("loaded", f_setRenderOrder );
    
                                    window.clearInterval(timeoutID);
                                }
                            }, 1);

                            ////////

                            // Entity.addEventListener("loaded", function(evt){
                            // 	let circlePos = new THREE.Vector3(0,0,0);
                            // 	let circleRot = new THREE.Vector3(0,0,0);
                            // 	let circleScale = new THREE.Vector3(1,1,1);

                            // 	let timeoutID = setInterval( function () {
                            // 		if (Entity.getAttribute("heightForQuiz")){ 
                            // 			let height = Entity.getAttribute("heightForQuiz");
                            // 			// console.log("20200831",height)
                            // 			// circlePos.x = circlePos.x + (width/2 + 0.1);
                            // 			// circlePos.y = circlePos.y - height/2 - 0.2;
                            // 			circleScale.multiply( new THREE.Vector3( 0.4, 0.4, 0.4 ) );
                            // 			circleScale.divide(Entity.getAttribute("scale"))
                            // 			circlePos.y = circlePos.y - height/2 - 0.3/Entity.getAttribute("scale").y;

                            // 			let base = document.createElement("a-plane");
                            // 			base.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle.png");
                            // 			base.setAttribute("id","circle_base");
                            // 			base.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#3C3C3C; depthWrite:false" );
                            // 			setTransform(base, circlePos, circleRot, circleScale);
                            // 			Entity.appendChild(base);
            
                            // 			let circle = document.createElement("a-plane");
                            // 			circle.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle_frame.png");
                            // 			circle.setAttribute("id","circle_out");
                            // 			circle.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#7B7B7B; depthWrite:false" ); 
                            // 			setTransform(circle, circlePos, circleRot, circleScale);
                            // 			Entity.appendChild(circle);
                                        
                            // 			let circle2 = document.createElement("a-plane");
                            // 			circle2.setAttribute("src","https://mifly0makar0assets.s3-ap-northeast-1.amazonaws.com/DefaultResource/2D/button/circle.png");
                            // 			circle2.setAttribute("id","circle_in");
                            // 			circle2.setAttribute( "material", "shader:flat; side:double; opacity: 1.0; transparent: true; color:#00d1c1; depthWrite:false" );
                            // 			circle2.setAttribute( "visible", false);
                            // 			circleScale.multiply( new THREE.Vector3( 0.7,0.7,0.7 ) );
                            // 			setTransform(circle2, circlePos, circleRot, circleScale);
                            // 			Entity.appendChild(circle2);
        
                            // 			window.clearInterval(timeoutID);
                            // 		}
                            // 	}, 1);
                                
                            // });

                        }

                    });
                }
            }

        }
        

        let timerContent = document.getElementById('timerContent');

        if(self.module.json.timer_type == "Custom"){
            if (self.module.timer.counter >= 0){
                let hour = Math.floor(self.module.timer.counter/3600);
                let min = Math.floor((self.module.timer.counter-hour*3600)/60);
                let sec = self.module.timer.counter-hour*3600-min*60;
                timerContent.textContent = hour.toString().padStart(2,'0')+":"+min.toString().padStart(2,'0')+":"+sec.toString().padStart(2,'0');
            }
        }

        setTimeout(function(){
            // vrController.cursorEntity.setAttribute('cursor', "fuse: true; fuseTimeout: 5" );
            // vrController.cursorEntity.setAttribute('animation__mouseenter', "property: geometry.thetaLength; delay: 5; startEvents: mouseenter; dur: 5; from: 0.5; to: 360" );
            // vrController.cursorEntity.setAttribute('animation__mouseleave', "property: geometry.thetaLength; startEvents: mouseleave; dur: 100; from: 360; to: 0.5" );

            //// 20210107-每一秒執行一次，將counter減一，並顯示剩餘秒數，到0會跳時間到 ////

            if (self.module.timer.counter >= 0){
                self.module.qClock = Date.now();
                let timeoutID = setInterval(function() {
                    self.module.timer.currentTimer = timeoutID;
                    self.module.timer.counter -= 1;

                    let hour = Math.floor(self.module.timer.counter/3600);
                    let min = Math.floor((self.module.timer.counter-hour*3600)/60);
                    let sec = self.module.timer.counter-hour*3600-min*60;
                    timerContent.textContent = hour.toString().padStart(2,'0')+":"+min.toString().padStart(2,'0')+":"+sec.toString().padStart(2,'0');
                    // console.log(self.module.timer.counter);
                    if (self.module.timer.counter <= 0){
                        window.clearInterval(self.module.timer.currentTimer);
                        if (self.module.json.timer_type == "Custom"){
                            if (next_question.show_score){
                                let scoreDiv = document.getElementById("scoreDiv");
                                let score = document.getElementById("score");
                                scoreDiv.style.display = "block";
                                score.textContent = self.module.score;
                                
                            }
                            else{
                                QuizController.nextQuestion(vrController);
                            }
                        }
                        else{
                            let temp = []
                            let quizEntity = self.module.quizEntity;
                            for (let item of quizEntity.children) {
                                temp.push(item);
                            }
                            temp.forEach(function(item){
                                for (let i = 0; i < self.makarObjects.length; i++ ){
                                    if (self.makarObjects[i].id == item.id){
                                        let makarObject = self.makarObjects[i];
                                        if(makarObject.getAttribute("src")){
                                            let id = makarObject.getAttribute("src").split('#')[1];
                                            if (document.getElementById(id)){
                                                document.getElementById(id).remove();
                                            }
                                        }
                                        makarObject.remove();
                                        self.makarObjects.splice(i,1);
                                    }
                                }
                            });
                            
                            let tipButtonDiv = document.getElementById("tipButtonDiv");
                            let tipDiv = document.getElementById("tipDiv");
                            tipButtonDiv.style.display = "none";
                            tipDiv.style.display = "none";
                            
                            let startQuiz = document.getElementById("startQuiz");
                            let QuizStartButton = document.getElementById("QuizStartButton");
                            let QuizStartContent = document.getElementById("QuizStartContent");
                            QuizStartContent.textContent = "時間到"

                            //[start-2023mmdd-howardhsu-modify]//
                            if(self.module.timer.counter == 0){
                                startQuiz.style.display = "block";
                            }
                            //[end-2023mmdd-howardhsu-modify]//

                            let quizIndex = {
                                question: idx ,
                                get_score:  0,
                                answer_time: self.module.json.question_list[idx].time_limit ,
                                answer_options: [],
                                answer_cloze: "",
                                answer_is_enable: false,
                                answer_is: false,
                            }
                            self.module.record[idx] = quizIndex;
                            self.module.record_time += self.module.json.question_list[idx].time_limit;
                            self.module.qClock = Date.now();

                            QuizStartButton.addEventListener("click",function(){
                                startQuiz.style.display = "none";
                                // vrController.nextQuestion();													
                                //[start-20230712-howardhsu-add]//
                                //// 存檔: 沒有下一題，預定紀錄答題狀態上雲端 (就是底下else的全部)
                                QuizController.saveQuizStatus(vrController);
                                //[end-20230712-howardhsu-add]//
                            });
                        }
                    }
                },1000);
            }
            
            //// -------------------------------------------------------------- ////
            // cursorEntity.setAttribute('geometry', "primitive: ring; radiusOuter: 0.04; radiusInner: 0.02; thetaLength: 360; thetaStart: 0;" );
        }, 3000);
    }else{
        //// 沒有下一題，把『觸控』開回來
        // vrController.cursorEntity.setAttribute('cursor', "fuse: true; fuseTimeout: 5" );

        //// 沒有下一題，預定紀錄答題狀態上雲端
        window.clearInterval(self.module.timer.currentTimer);
        let timer = document.getElementById("timerDiv");
        timer.style.display = "none";
        let tipButtonDiv = document.getElementById("tipButtonDiv");
        let tipDiv = document.getElementById("tipDiv");
        tipButtonDiv.style.display = "none";
        tipDiv.style.display = "none";

        let quizEndDiv = document.getElementById("quizEndDiv");
        quizEndDiv.style.display = "block";
        quizEndDiv.addEventListener("click", function(){
            quizEndDiv.style.display = "none";
        });


        // console.log("VRFunc.js: self.module: ", self.module , self.projectIdx,  publishVRProjs.result[self.projectIdx] );
        console.log("VRFunc.js: quiz end , self.module.record = " , self.module.record  );
        let playing_user = "", device_id = "";
        if (localStorage.getItem("login_shared_id") ){
            playing_user = localStorage.getItem("login_shared_id");
        }
        if (localStorage.getItem("device_id")){
            device_id = localStorage.getItem("device_id");
        }
        //quiz_log
        let quizVRLogData  = {
            user_id: publishVRProjs.result[self.projectIdx].user_id ,
            playing_user: playing_user , //// 在還沒有登入流程時候 一定要設為空字串
            proj_id: publishVRProjs.result[self.projectIdx].proj_id ,
            proj_type: "vr" ,
            device_id: device_id ,
            brand:"",
            os: navigator.userAgent , 
            location_long:0.0,
            location_lan:0.0,
            module:[ self.module.json ],
            record_time: self.module.record_time,
            record_score: self.module.score ,
            record:self.module.record,

        }

        //// 目前存放分為 『log資訊』給『數據分析』 跟 『專案遊玩資訊』給『viewer 查詢』 
        quizLog( window.serverUrl , quizVRLogData);
        
        for (let i = 0, len = userPublishProjs.proj_list.length; i < len; i++){
            if (userPublishProjs.proj_list[i].proj_id == publishVRProjs.result[self.projectIdx].proj_id ){
                // quizVRRecord = userPublishProjs.proj_list[i];
                // quizVRRecord.playing_user_id = playing_user;
                let quizVRRecord = {
                    head_pic: userPublishProjs.proj_list[i].head_pic,
                    loc: userPublishProjs.proj_list[i].loc,
                    module_type: userPublishProjs.proj_list[i].module_type,
                    name: userPublishProjs.proj_list[i].name,
                    playing_user_id: playing_user,
                    proj_cover_urls: userPublishProjs.proj_list[i].proj_cover_urls,
                    proj_id: userPublishProjs.proj_list[i].proj_id,
                    proj_name: userPublishProjs.proj_list[i].proj_name,
                    proj_type: "vr",
                    shared_id: userPublishProjs.proj_list[i].shared_id,
                    snapshot_url: userPublishProjs.proj_list[i].snapshot_url,
                    user_id: userPublishProjs.proj_list[i].user_id,
                }
                updateRecordModule(window.serverUrl , quizVRRecord );
                console.log("VRFunc.js: quiz end, " , i , userPublishProjs.proj_list[i] , quizVRRecord );
            }
        }
        
        console.log("VRFunc.js: quiz end , quizVRLogData = " , quizVRLogData );
        
    }
}

function saveQuizStatus(vrController) { 		
    let self = vrController		
    //// 沒有下一題，把『觸控』開回來
    // vrController.cursorEntity.setAttribute('cursor', "fuse: true; fuseTimeout: 5" );

    //// 沒有下一題，預定紀錄答題狀態上雲端
    window.clearInterval(self.module.timer.currentTimer);
    let timer = document.getElementById("timerDiv");
    timer.style.display = "none";
    let tipButtonDiv = document.getElementById("tipButtonDiv");
    let tipDiv = document.getElementById("tipDiv");
    tipButtonDiv.style.display = "none";
    tipDiv.style.display = "none";

    let quizEndDiv = document.getElementById("quizEndDiv");
    quizEndDiv.style.display = "block";
    quizEndDiv.addEventListener("click", function(){
        quizEndDiv.style.display = "none";
    });

    // console.log("VRFunc.js: self.module: ", self.module , self.projectIdx,  publishVRProjs.result[self.projectIdx] );
    console.log("VRFunc.js: quiz end , self.module.record = " , self.module.record  );
    let playing_user = "", device_id = "";
    if (localStorage.getItem("login_shared_id") ){
        playing_user = localStorage.getItem("login_shared_id");
    }
    if (localStorage.getItem("device_id")){
        device_id = localStorage.getItem("device_id");
    }
    //quiz_log
    let quizVRLogData  = {
        user_id: publishVRProjs.result[self.projectIdx].user_id ,
        playing_user: playing_user , //// 在還沒有登入流程時候 一定要設為空字串
        proj_id: publishVRProjs.result[self.projectIdx].proj_id ,
        proj_type: "vr" ,
        device_id: device_id ,
        brand:"",
        os: navigator.userAgent , 
        location_long:0.0,
        location_lan:0.0,
        module:[ self.module.json ],
        record_time: self.module.record_time,
        record_score: self.module.score ,
        record:self.module.record,

    }

    //// 目前存放分為 『log資訊』給『數據分析』 跟 『專案遊玩資訊』給『viewer 查詢』 
    quizLog( window.serverUrl , quizVRLogData);
    
    for (let i = 0, len = userPublishProjs.proj_list.length; i < len; i++){
        if (userPublishProjs.proj_list[i].proj_id == publishVRProjs.result[self.projectIdx].proj_id ){
            // quizVRRecord = userPublishProjs.proj_list[i];
            // quizVRRecord.playing_user_id = playing_user;
            let quizVRRecord = {
                head_pic: userPublishProjs.proj_list[i].head_pic,
                loc: userPublishProjs.proj_list[i].loc,
                module_type: userPublishProjs.proj_list[i].module_type,
                name: userPublishProjs.proj_list[i].name,
                playing_user_id: playing_user,
                proj_cover_urls: userPublishProjs.proj_list[i].proj_cover_urls,
                proj_id: userPublishProjs.proj_list[i].proj_id,
                proj_name: userPublishProjs.proj_list[i].proj_name,
                proj_type: "vr",
                shared_id: userPublishProjs.proj_list[i].shared_id,
                snapshot_url: userPublishProjs.proj_list[i].snapshot_url,
                user_id: userPublishProjs.proj_list[i].user_id,
            }
            updateRecordModule(window.serverUrl , quizVRRecord );
            console.log("VRFunc.js: quiz end, " , i , userPublishProjs.proj_list[i] , quizVRRecord );
        }
    }

    console.log("VRFunc.js: quiz end , quizVRLogData = " , quizVRLogData );	
}

/***/ })

}]);